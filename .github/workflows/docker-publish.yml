name: Build & Push Docker image

on:
  # Jalankan setiap kali ada push ke main atau pembuatan release/tag
  push:
    branches: [ "main" ]
    # Hilangkan baris berikut kalau tidak ingin per-tag
    tags:     [ "v*.*.*" ]

env:
  # Ganti dengan nama repo Docker Hub Anda, mis. rahmat/my-app
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/lareact

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1) Ambil kode
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Siapkan Buildx (mendukung cache & multi-arch)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Login ke Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # (Opsional) 4) Muat cache build layer dari registry
      - name: Configure build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 5) Tentukan tag. Di sini:
      #    latest           → setiap push ke main
      #    v1.2.3 atau sha → jika ada tag atau commit sha
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ github.ref_type == 'tag' && env.IMAGE_NAME }}:${{ github.ref_name }}

          # Aktifkan cache (opsional, tapi mempercepat redaksi berikutnya)
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to:   type=local,dest=/tmp/.buildx-cache

      # (Opsional) 6) Bersihkan cache lokal untuk menghemat ruang
      - name: Clean up cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
